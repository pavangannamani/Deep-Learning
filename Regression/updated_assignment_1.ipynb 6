{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "updated_assignment_1.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "1ww4cp5OrmlS"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "\n",
        "df = pd.read_csv(\"nba2k20-full.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AupQAl4l7rax",
        "outputId": "c929cba4-cbb6-498a-a1b0-8b7c1938ba38"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "rating                   0\n",
              "height                   0\n",
              "weight                   0\n",
              "salary                   0\n",
              "draft_year               0\n",
              "                        ..\n",
              "college_Wichita State    0\n",
              "college_Wisconsin        0\n",
              "college_Wyoming          0\n",
              "college_Xavier           0\n",
              "college_Yale             0\n",
              "Length: 189, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"salary\"] = df[\"salary\"].str.replace(\"$\", \" \")\n",
        "df[\"salary\"].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vRtZM44Ty3_6",
        "outputId": "3129d315-8f4c-4772-fba7-3f4fc4ee53e6"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " 1416852     20\n",
              " 898310      12\n",
              " 1618520      9\n",
              " 4767000      9\n",
              " 2564753      7\n",
              "             ..\n",
              " 5697600      1\n",
              " 25565217     1\n",
              " 2731713      1\n",
              " 6825000      1\n",
              " 522738       1\n",
              "Name: salary, Length: 308, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"weight\"] = df[\"weight\"].str.split(\" \").str.get(0)\n",
        "df[\"height\"] = df[\"height\"].str.replace(\"Undrafted\",\"0\")\n",
        "df[\"weight\"] = df[\"weight\"].str.replace(\"Undrafted\",\"0\")\n",
        "df[\"draft_peak\"] = df[\"draft_peak\"].str.replace(\"Undrafted\",\"0\")\n",
        "df[\"draft_round\"] = df[\"draft_round\"].str.replace(\"Undrafted\",\"0\")\n",
        "\n",
        "\n",
        "df[\"height\"] = df[\"height\"].str.split(\"/\").str.get(0).str.replace(\"-\",\".\").astype(float)"
      ],
      "metadata": {
        "id": "00lqHuH-y4IH"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import datetime\n",
        "\n",
        "todays_date = datetime.date.today()\n",
        "#todays_year = datatime.date.year()\n",
        "print(todays_date)\n",
        "\n",
        "df[\"b_day\"] = pd.to_datetime(df[\"b_day\"])\n",
        "df[\"birth_year\"] = df[\"b_day\"].dt.year\n",
        "df[\"birth_month\"] = df[\"b_day\"].dt.month\n",
        "df[\"birth_day\"] = df[\"b_day\"].dt.day\n",
        "df[\"age\"] = (todays_date.year - df[\"birth_year\"])\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0kYQGJwqy4Lg",
        "outputId": "5529b39c-4077-47a3-8630-c72e27d3231a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2022-04-24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.sample(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 593
        },
        "id": "6cVzR7fP2ScU",
        "outputId": "441a436a-d8e9-4cfb-d630-5ddec8f180b7"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             full_name  rating jersey                    team position  \\\n",
              "316      Grayson Allen      72     #3       Memphis Grizzlies        G   \n",
              "364  Terrance Ferguson      71    #23   Oklahoma City Thunder        G   \n",
              "283       Allen Crabbe      73     #0                     NaN      G-F   \n",
              "246         Quinn Cook      74     #2      Los Angeles Lakers        G   \n",
              "134        Jeff Teague      78     #0           Atlanta Hawks        G   \n",
              "304     Omari Spellman      73     #0  Minnesota Timberwolves        F   \n",
              "82      Derrick Favors      80    #22    New Orleans Pelicans        F   \n",
              "102        Jeremy Lamb      79    #26          Indiana Pacers        G   \n",
              "341   Alfonzo McKinnie      72     #0     Cleveland Cavaliers        F   \n",
              "49        John Collins      84    #20           Atlanta Hawks        F   \n",
              "\n",
              "         b_day  height weight     salary country  draft_year draft_round  \\\n",
              "316 1995-10-08     6.4    205    2429400     USA        2018           1   \n",
              "364 1998-05-17     6.6    184    2475840     USA        2017           1   \n",
              "283 1992-04-09     6.5    197   17818456     USA        2013           2   \n",
              "246 1993-03-23     6.1    180    3000000     USA        2015           0   \n",
              "134 1988-06-10     6.3    181   19000000     USA        2009           1   \n",
              "304 1997-07-21     6.8    245    1897800     USA        2018           1   \n",
              "82  1991-07-15     6.9    246   17650000     USA        2010           1   \n",
              "102 1992-05-30     6.5    180   10500000     USA        2012           1   \n",
              "341 1992-09-17     6.8    215    2391985     USA        2015           0   \n",
              "49  1997-09-23     6.9    225    2686560     USA        2017           1   \n",
              "\n",
              "    draft_peak       college  birth_year  birth_month  birth_day  age  \n",
              "316         21          Duke        1995           10          8   27  \n",
              "364         21           NaN        1998            5         17   24  \n",
              "283         31    California        1992            4          9   30  \n",
              "246          0          Duke        1993            3         23   29  \n",
              "134         19   Wake Forest        1988            6         10   34  \n",
              "304         30     Villanova        1997            7         21   25  \n",
              "82           3  Georgia Tech        1991            7         15   31  \n",
              "102         12         UConn        1992            5         30   30  \n",
              "341          0     Green Bay        1992            9         17   30  \n",
              "49          19   Wake Forest        1997            9         23   25  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20255ae7-156c-41be-a881-248ca0587b57\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>full_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>jersey</th>\n",
              "      <th>team</th>\n",
              "      <th>position</th>\n",
              "      <th>b_day</th>\n",
              "      <th>height</th>\n",
              "      <th>weight</th>\n",
              "      <th>salary</th>\n",
              "      <th>country</th>\n",
              "      <th>draft_year</th>\n",
              "      <th>draft_round</th>\n",
              "      <th>draft_peak</th>\n",
              "      <th>college</th>\n",
              "      <th>birth_year</th>\n",
              "      <th>birth_month</th>\n",
              "      <th>birth_day</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>316</th>\n",
              "      <td>Grayson Allen</td>\n",
              "      <td>72</td>\n",
              "      <td>#3</td>\n",
              "      <td>Memphis Grizzlies</td>\n",
              "      <td>G</td>\n",
              "      <td>1995-10-08</td>\n",
              "      <td>6.4</td>\n",
              "      <td>205</td>\n",
              "      <td>2429400</td>\n",
              "      <td>USA</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>21</td>\n",
              "      <td>Duke</td>\n",
              "      <td>1995</td>\n",
              "      <td>10</td>\n",
              "      <td>8</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>Terrance Ferguson</td>\n",
              "      <td>71</td>\n",
              "      <td>#23</td>\n",
              "      <td>Oklahoma City Thunder</td>\n",
              "      <td>G</td>\n",
              "      <td>1998-05-17</td>\n",
              "      <td>6.6</td>\n",
              "      <td>184</td>\n",
              "      <td>2475840</td>\n",
              "      <td>USA</td>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "      <td>21</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1998</td>\n",
              "      <td>5</td>\n",
              "      <td>17</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>283</th>\n",
              "      <td>Allen Crabbe</td>\n",
              "      <td>73</td>\n",
              "      <td>#0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>G-F</td>\n",
              "      <td>1992-04-09</td>\n",
              "      <td>6.5</td>\n",
              "      <td>197</td>\n",
              "      <td>17818456</td>\n",
              "      <td>USA</td>\n",
              "      <td>2013</td>\n",
              "      <td>2</td>\n",
              "      <td>31</td>\n",
              "      <td>California</td>\n",
              "      <td>1992</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>Quinn Cook</td>\n",
              "      <td>74</td>\n",
              "      <td>#2</td>\n",
              "      <td>Los Angeles Lakers</td>\n",
              "      <td>G</td>\n",
              "      <td>1993-03-23</td>\n",
              "      <td>6.1</td>\n",
              "      <td>180</td>\n",
              "      <td>3000000</td>\n",
              "      <td>USA</td>\n",
              "      <td>2015</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Duke</td>\n",
              "      <td>1993</td>\n",
              "      <td>3</td>\n",
              "      <td>23</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134</th>\n",
              "      <td>Jeff Teague</td>\n",
              "      <td>78</td>\n",
              "      <td>#0</td>\n",
              "      <td>Atlanta Hawks</td>\n",
              "      <td>G</td>\n",
              "      <td>1988-06-10</td>\n",
              "      <td>6.3</td>\n",
              "      <td>181</td>\n",
              "      <td>19000000</td>\n",
              "      <td>USA</td>\n",
              "      <td>2009</td>\n",
              "      <td>1</td>\n",
              "      <td>19</td>\n",
              "      <td>Wake Forest</td>\n",
              "      <td>1988</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>304</th>\n",
              "      <td>Omari Spellman</td>\n",
              "      <td>73</td>\n",
              "      <td>#0</td>\n",
              "      <td>Minnesota Timberwolves</td>\n",
              "      <td>F</td>\n",
              "      <td>1997-07-21</td>\n",
              "      <td>6.8</td>\n",
              "      <td>245</td>\n",
              "      <td>1897800</td>\n",
              "      <td>USA</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>30</td>\n",
              "      <td>Villanova</td>\n",
              "      <td>1997</td>\n",
              "      <td>7</td>\n",
              "      <td>21</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82</th>\n",
              "      <td>Derrick Favors</td>\n",
              "      <td>80</td>\n",
              "      <td>#22</td>\n",
              "      <td>New Orleans Pelicans</td>\n",
              "      <td>F</td>\n",
              "      <td>1991-07-15</td>\n",
              "      <td>6.9</td>\n",
              "      <td>246</td>\n",
              "      <td>17650000</td>\n",
              "      <td>USA</td>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Georgia Tech</td>\n",
              "      <td>1991</td>\n",
              "      <td>7</td>\n",
              "      <td>15</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>Jeremy Lamb</td>\n",
              "      <td>79</td>\n",
              "      <td>#26</td>\n",
              "      <td>Indiana Pacers</td>\n",
              "      <td>G</td>\n",
              "      <td>1992-05-30</td>\n",
              "      <td>6.5</td>\n",
              "      <td>180</td>\n",
              "      <td>10500000</td>\n",
              "      <td>USA</td>\n",
              "      <td>2012</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>UConn</td>\n",
              "      <td>1992</td>\n",
              "      <td>5</td>\n",
              "      <td>30</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>341</th>\n",
              "      <td>Alfonzo McKinnie</td>\n",
              "      <td>72</td>\n",
              "      <td>#0</td>\n",
              "      <td>Cleveland Cavaliers</td>\n",
              "      <td>F</td>\n",
              "      <td>1992-09-17</td>\n",
              "      <td>6.8</td>\n",
              "      <td>215</td>\n",
              "      <td>2391985</td>\n",
              "      <td>USA</td>\n",
              "      <td>2015</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Green Bay</td>\n",
              "      <td>1992</td>\n",
              "      <td>9</td>\n",
              "      <td>17</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>John Collins</td>\n",
              "      <td>84</td>\n",
              "      <td>#20</td>\n",
              "      <td>Atlanta Hawks</td>\n",
              "      <td>F</td>\n",
              "      <td>1997-09-23</td>\n",
              "      <td>6.9</td>\n",
              "      <td>225</td>\n",
              "      <td>2686560</td>\n",
              "      <td>USA</td>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "      <td>19</td>\n",
              "      <td>Wake Forest</td>\n",
              "      <td>1997</td>\n",
              "      <td>9</td>\n",
              "      <td>23</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20255ae7-156c-41be-a881-248ca0587b57')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-20255ae7-156c-41be-a881-248ca0587b57 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-20255ae7-156c-41be-a881-248ca0587b57');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns.values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C99Iwmy31bKe",
        "outputId": "51c1ebd4-d0d9-42b8-a61b-3ba815414a61"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['full_name', 'rating', 'jersey', 'team', 'position', 'b_day',\n",
              "       'height', 'weight', 'salary', 'country', 'draft_year',\n",
              "       'draft_round', 'draft_peak', 'college', 'birth_year',\n",
              "       'birth_month', 'birth_day', 'age'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(['full_name','jersey', 'b_day','full_name','birth_month', 'birth_day',], axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "rwDPqfAsy4Xm"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(['position'], axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "lrKXAYzfy4aw"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.sample(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 593
        },
        "id": "551lbTWSy4d4",
        "outputId": "9388128b-00dc-4509-b6f9-ed87e29f5113"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rating                  team  height weight     salary    country  \\\n",
              "76       81         Brooklyn Nets    6.11    265    9881598        USA   \n",
              "330      72       Detroit Pistons    7.00    216    3569643  Australia   \n",
              "38       86    Washington Wizards    6.40    195   38199000        USA   \n",
              "296      73       New York Knicks    6.40    190    4855800     France   \n",
              "82       80  New Orleans Pelicans    6.90    246   17650000        USA   \n",
              "266      74                   NaN    6.10    220     451326        USA   \n",
              "159      77   Cleveland Cavaliers    6.10    190    4764960        USA   \n",
              "223      75         Brooklyn Nets    6.90    215    1699236     Latvia   \n",
              "204      75          Phoenix Suns    6.10    260    5453280  Australia   \n",
              "251      74         Orlando Magic    6.30    195    9745200        USA   \n",
              "\n",
              "     draft_year draft_round draft_peak           college  birth_year  age  \n",
              "76         2008           2         35         Texas A&M        1988   34  \n",
              "330        2016           1         10               NaN        1997   25  \n",
              "38         2010           1          1          Kentucky        1990   32  \n",
              "296        2017           1          8               NaN        1998   24  \n",
              "82         2010           1          3      Georgia Tech        1991   31  \n",
              "266        2017           2         35        California        1997   25  \n",
              "159        2018           1          8           Alabama        1999   23  \n",
              "223        2018           2         40               NaN        1998   24  \n",
              "204        2009           0          0  Washington State        1986   36  \n",
              "251        2017           1          1        Washington        1998   24  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-30286929-7748-44e3-9b51-cc24a64b3750\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>team</th>\n",
              "      <th>height</th>\n",
              "      <th>weight</th>\n",
              "      <th>salary</th>\n",
              "      <th>country</th>\n",
              "      <th>draft_year</th>\n",
              "      <th>draft_round</th>\n",
              "      <th>draft_peak</th>\n",
              "      <th>college</th>\n",
              "      <th>birth_year</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>81</td>\n",
              "      <td>Brooklyn Nets</td>\n",
              "      <td>6.11</td>\n",
              "      <td>265</td>\n",
              "      <td>9881598</td>\n",
              "      <td>USA</td>\n",
              "      <td>2008</td>\n",
              "      <td>2</td>\n",
              "      <td>35</td>\n",
              "      <td>Texas A&amp;M</td>\n",
              "      <td>1988</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>72</td>\n",
              "      <td>Detroit Pistons</td>\n",
              "      <td>7.00</td>\n",
              "      <td>216</td>\n",
              "      <td>3569643</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2016</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1997</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>86</td>\n",
              "      <td>Washington Wizards</td>\n",
              "      <td>6.40</td>\n",
              "      <td>195</td>\n",
              "      <td>38199000</td>\n",
              "      <td>USA</td>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Kentucky</td>\n",
              "      <td>1990</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>73</td>\n",
              "      <td>New York Knicks</td>\n",
              "      <td>6.40</td>\n",
              "      <td>190</td>\n",
              "      <td>4855800</td>\n",
              "      <td>France</td>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1998</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82</th>\n",
              "      <td>80</td>\n",
              "      <td>New Orleans Pelicans</td>\n",
              "      <td>6.90</td>\n",
              "      <td>246</td>\n",
              "      <td>17650000</td>\n",
              "      <td>USA</td>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Georgia Tech</td>\n",
              "      <td>1991</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266</th>\n",
              "      <td>74</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.10</td>\n",
              "      <td>220</td>\n",
              "      <td>451326</td>\n",
              "      <td>USA</td>\n",
              "      <td>2017</td>\n",
              "      <td>2</td>\n",
              "      <td>35</td>\n",
              "      <td>California</td>\n",
              "      <td>1997</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>159</th>\n",
              "      <td>77</td>\n",
              "      <td>Cleveland Cavaliers</td>\n",
              "      <td>6.10</td>\n",
              "      <td>190</td>\n",
              "      <td>4764960</td>\n",
              "      <td>USA</td>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>1999</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>223</th>\n",
              "      <td>75</td>\n",
              "      <td>Brooklyn Nets</td>\n",
              "      <td>6.90</td>\n",
              "      <td>215</td>\n",
              "      <td>1699236</td>\n",
              "      <td>Latvia</td>\n",
              "      <td>2018</td>\n",
              "      <td>2</td>\n",
              "      <td>40</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1998</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>75</td>\n",
              "      <td>Phoenix Suns</td>\n",
              "      <td>6.10</td>\n",
              "      <td>260</td>\n",
              "      <td>5453280</td>\n",
              "      <td>Australia</td>\n",
              "      <td>2009</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Washington State</td>\n",
              "      <td>1986</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251</th>\n",
              "      <td>74</td>\n",
              "      <td>Orlando Magic</td>\n",
              "      <td>6.30</td>\n",
              "      <td>195</td>\n",
              "      <td>9745200</td>\n",
              "      <td>USA</td>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Washington</td>\n",
              "      <td>1998</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30286929-7748-44e3-9b51-cc24a64b3750')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-30286929-7748-44e3-9b51-cc24a64b3750 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-30286929-7748-44e3-9b51-cc24a64b3750');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.get_dummies(df, columns=['country', 'team', 'college'])"
      ],
      "metadata": {
        "id": "P1zJnVX0y4hA"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.sample(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "MFMTk34Dy4kB",
        "outputId": "968a6091-dd03-4977-e813-b72d804625a0"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rating  height weight     salary  draft_year draft_round draft_peak  \\\n",
              "80       80    6.20    190    7317074        2008           1          1   \n",
              "389      70    6.50    198    1416852        2018           2         45   \n",
              "276      73    6.80    215    1788296        2017           2         36   \n",
              "289      73    6.60    220    3540000        2016           0          0   \n",
              "7        93    6.80    210   33005556        2010           1         10   \n",
              "372      71    6.30    190    1416852        2018           2         31   \n",
              "92       79    6.11    234    2376840        2017           1         22   \n",
              "361      71    6.10    200    1416852        2018           2         32   \n",
              "344      72    6.11    215     898310        2019           2         31   \n",
              "272      74    6.80    225    4469160        2019           1          9   \n",
              "\n",
              "     birth_year  age  country_Angola  ...  college_Washington  \\\n",
              "80         1988   34               0  ...                   0   \n",
              "389        1998   24               0  ...                   0   \n",
              "276        1996   26               0  ...                   0   \n",
              "289        1993   29               0  ...                   0   \n",
              "7          1990   32               0  ...                   0   \n",
              "372        1997   25               0  ...                   0   \n",
              "92         1998   24               0  ...                   0   \n",
              "361        1995   27               0  ...                   0   \n",
              "344        1990   32               0  ...                   0   \n",
              "272        1998   24               0  ...                   0   \n",
              "\n",
              "     college_Washington State  college_Weber State  college_West Virginia  \\\n",
              "80                          0                    0                      0   \n",
              "389                         0                    0                      0   \n",
              "276                         0                    0                      0   \n",
              "289                         0                    0                      0   \n",
              "7                           0                    0                      0   \n",
              "372                         0                    0                      0   \n",
              "92                          0                    0                      0   \n",
              "361                         0                    0                      1   \n",
              "344                         0                    0                      0   \n",
              "272                         0                    0                      0   \n",
              "\n",
              "     college_Western Kentucky  college_Wichita State  college_Wisconsin  \\\n",
              "80                          0                      0                  0   \n",
              "389                         0                      0                  0   \n",
              "276                         0                      0                  0   \n",
              "289                         0                      0                  0   \n",
              "7                           0                      0                  0   \n",
              "372                         0                      0                  0   \n",
              "92                          0                      0                  0   \n",
              "361                         0                      0                  0   \n",
              "344                         0                      0                  0   \n",
              "272                         0                      0                  0   \n",
              "\n",
              "     college_Wyoming  college_Xavier  college_Yale  \n",
              "80                 0               0             0  \n",
              "389                0               0             0  \n",
              "276                0               0             0  \n",
              "289                0               0             0  \n",
              "7                  0               0             0  \n",
              "372                0               0             0  \n",
              "92                 0               0             0  \n",
              "361                0               0             0  \n",
              "344                0               0             0  \n",
              "272                0               0             0  \n",
              "\n",
              "[10 rows x 189 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-495a340a-3f25-444d-b54d-893c00806864\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>height</th>\n",
              "      <th>weight</th>\n",
              "      <th>salary</th>\n",
              "      <th>draft_year</th>\n",
              "      <th>draft_round</th>\n",
              "      <th>draft_peak</th>\n",
              "      <th>birth_year</th>\n",
              "      <th>age</th>\n",
              "      <th>country_Angola</th>\n",
              "      <th>...</th>\n",
              "      <th>college_Washington</th>\n",
              "      <th>college_Washington State</th>\n",
              "      <th>college_Weber State</th>\n",
              "      <th>college_West Virginia</th>\n",
              "      <th>college_Western Kentucky</th>\n",
              "      <th>college_Wichita State</th>\n",
              "      <th>college_Wisconsin</th>\n",
              "      <th>college_Wyoming</th>\n",
              "      <th>college_Xavier</th>\n",
              "      <th>college_Yale</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>80</td>\n",
              "      <td>6.20</td>\n",
              "      <td>190</td>\n",
              "      <td>7317074</td>\n",
              "      <td>2008</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1988</td>\n",
              "      <td>34</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>389</th>\n",
              "      <td>70</td>\n",
              "      <td>6.50</td>\n",
              "      <td>198</td>\n",
              "      <td>1416852</td>\n",
              "      <td>2018</td>\n",
              "      <td>2</td>\n",
              "      <td>45</td>\n",
              "      <td>1998</td>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>276</th>\n",
              "      <td>73</td>\n",
              "      <td>6.80</td>\n",
              "      <td>215</td>\n",
              "      <td>1788296</td>\n",
              "      <td>2017</td>\n",
              "      <td>2</td>\n",
              "      <td>36</td>\n",
              "      <td>1996</td>\n",
              "      <td>26</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>289</th>\n",
              "      <td>73</td>\n",
              "      <td>6.60</td>\n",
              "      <td>220</td>\n",
              "      <td>3540000</td>\n",
              "      <td>2016</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1993</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>93</td>\n",
              "      <td>6.80</td>\n",
              "      <td>210</td>\n",
              "      <td>33005556</td>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>1990</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>71</td>\n",
              "      <td>6.30</td>\n",
              "      <td>190</td>\n",
              "      <td>1416852</td>\n",
              "      <td>2018</td>\n",
              "      <td>2</td>\n",
              "      <td>31</td>\n",
              "      <td>1997</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92</th>\n",
              "      <td>79</td>\n",
              "      <td>6.11</td>\n",
              "      <td>234</td>\n",
              "      <td>2376840</td>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>1998</td>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>361</th>\n",
              "      <td>71</td>\n",
              "      <td>6.10</td>\n",
              "      <td>200</td>\n",
              "      <td>1416852</td>\n",
              "      <td>2018</td>\n",
              "      <td>2</td>\n",
              "      <td>32</td>\n",
              "      <td>1995</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>72</td>\n",
              "      <td>6.11</td>\n",
              "      <td>215</td>\n",
              "      <td>898310</td>\n",
              "      <td>2019</td>\n",
              "      <td>2</td>\n",
              "      <td>31</td>\n",
              "      <td>1990</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>272</th>\n",
              "      <td>74</td>\n",
              "      <td>6.80</td>\n",
              "      <td>225</td>\n",
              "      <td>4469160</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>1998</td>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 189 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-495a340a-3f25-444d-b54d-893c00806864')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-495a340a-3f25-444d-b54d-893c00806864 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-495a340a-3f25-444d-b54d-893c00806864');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fRSCp_HJ4JQb",
        "outputId": "912004e3-d74d-484a-973e-a074f00101bf"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "rating                     int64\n",
              "height                   float64\n",
              "weight                    object\n",
              "salary                    object\n",
              "draft_year                 int64\n",
              "                          ...   \n",
              "college_Wichita State      uint8\n",
              "college_Wisconsin          uint8\n",
              "college_Wyoming            uint8\n",
              "college_Xavier             uint8\n",
              "college_Yale               uint8\n",
              "Length: 189, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "m9qH4ePH7nRg"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"weight\"] = df[\"weight\"].astype(int)\n",
        "df[\"salary\"] = df[\"salary\"].astype(int)\n",
        "df[\"draft_round\"] = df[\"draft_round\"].astype(int)\n",
        "df[\"draft_peak\"] = df[\"draft_peak\"].astype(int)"
      ],
      "metadata": {
        "id": "nQPXoUdU4W6p"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for c in df.columns:\n",
        "  print(df[c].dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "54MN8jLP4zJZ",
        "outputId": "3607fc65-da6f-4e26-8fc4-2655f371c733"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "int64\n",
            "float64\n",
            "int64\n",
            "int64\n",
            "int64\n",
            "int64\n",
            "int64\n",
            "int64\n",
            "int64\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n",
            "uint8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.sample"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yt30S2Qc2TcF",
        "outputId": "56683369-44e4-4df4-b642-c45a77734667"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.sample of      rating  height  weight    salary  draft_year  draft_round  draft_peak  \\\n",
              "0        97    6.90     250  37436858        2003            1           1   \n",
              "1        97    6.70     225  32742000        2011            1          15   \n",
              "2        96    6.11     242  25842697        2013            1          15   \n",
              "3        96    6.10     230  37199000        2007            1           2   \n",
              "4        96    6.50     220  38199000        2009            1           3   \n",
              "..      ...     ...     ...       ...         ...          ...         ...   \n",
              "424      68    6.00     180    522738        2018            0           0   \n",
              "425      68    6.30     200     79568        2015            2          60   \n",
              "426      68    6.10     200     79568        2018            0           0   \n",
              "427      68    6.30     190    898310        2019            0           0   \n",
              "428      67    6.70     215   1416852        2018            0           0   \n",
              "\n",
              "     birth_year  age  country_Angola  ...  college_Washington  \\\n",
              "0          1984   38               0  ...                   0   \n",
              "1          1991   31               0  ...                   0   \n",
              "2          1994   28               0  ...                   0   \n",
              "3          1988   34               0  ...                   0   \n",
              "4          1989   33               0  ...                   0   \n",
              "..          ...  ...             ...  ...                 ...   \n",
              "424        1995   27               0  ...                   0   \n",
              "425        1994   28               0  ...                   0   \n",
              "426        1997   25               0  ...                   0   \n",
              "427        2000   22               0  ...                   0   \n",
              "428        1994   28               0  ...                   0   \n",
              "\n",
              "     college_Washington State  college_Weber State  college_West Virginia  \\\n",
              "0                           0                    0                      0   \n",
              "1                           0                    0                      0   \n",
              "2                           0                    0                      0   \n",
              "3                           0                    0                      0   \n",
              "4                           0                    0                      0   \n",
              "..                        ...                  ...                    ...   \n",
              "424                         0                    0                      0   \n",
              "425                         0                    0                      0   \n",
              "426                         0                    0                      0   \n",
              "427                         0                    0                      0   \n",
              "428                         0                    0                      0   \n",
              "\n",
              "     college_Western Kentucky  college_Wichita State  college_Wisconsin  \\\n",
              "0                           0                      0                  0   \n",
              "1                           0                      0                  0   \n",
              "2                           0                      0                  0   \n",
              "3                           0                      0                  0   \n",
              "4                           0                      0                  0   \n",
              "..                        ...                    ...                ...   \n",
              "424                         0                      0                  0   \n",
              "425                         0                      0                  0   \n",
              "426                         0                      0                  0   \n",
              "427                         0                      0                  0   \n",
              "428                         0                      0                  0   \n",
              "\n",
              "     college_Wyoming  college_Xavier  college_Yale  \n",
              "0                  0               0             0  \n",
              "1                  0               0             0  \n",
              "2                  0               0             0  \n",
              "3                  0               0             0  \n",
              "4                  0               0             0  \n",
              "..               ...             ...           ...  \n",
              "424                0               0             0  \n",
              "425                0               0             0  \n",
              "426                0               0             0  \n",
              "427                0               0             0  \n",
              "428                0               0             0  \n",
              "\n",
              "[429 rows x 189 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1 = df.copy()"
      ],
      "metadata": {
        "id": "xoHdDHde-O_Z"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_cols = df.columns[~df.columns.isin(['salary'])]\n",
        "print(train_cols)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "br0GX7jTABk3",
        "outputId": "faf9c111-b745-4eaf-9df3-b33ac09dc9cb"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['rating', 'height', 'weight', 'draft_year', 'draft_round', 'draft_peak',\n",
            "       'birth_year', 'age', 'country_Angola', 'country_Australia',\n",
            "       ...\n",
            "       'college_Washington', 'college_Washington State', 'college_Weber State',\n",
            "       'college_West Virginia', 'college_Western Kentucky',\n",
            "       'college_Wichita State', 'college_Wisconsin', 'college_Wyoming',\n",
            "       'college_Xavier', 'college_Yale'],\n",
            "      dtype='object', length=188)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "V190PDDHAnSq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_x = df[train_cols]\n"
      ],
      "metadata": {
        "id": "Fr9atjVkAnc9"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "35Lm7fTnAng2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler\n",
        "\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(df_x, df[\"salary\"], test_size = 0.30, random_state = 0)"
      ],
      "metadata": {
        "id": "lRxBEaX2AnkX"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import models\n",
        "from tensorflow.keras import layers\n",
        "import sklearn\n",
        "\n",
        "\n",
        "def build_model():  \n",
        "    model = models.Sequential()\n",
        "    model.add(layers.Dense(188, activation='relu', input_shape=(X_train.shape[1],)))\n",
        "    model.add(layers.Dropout(rate=.3))\n",
        "    model.add(layers.Dense(64, activation='relu'))\n",
        "    model.add(layers.Dense(1)) \n",
        "    model.compile(optimizer='rmsprop', loss='mse',  metrics=['mse', 'mae', keras.metrics.RootMeanSquaredError()])\n",
        "   #model.compile(optimizer='adam', loss='mse', metrics=[tf.metrics.Recall(), 'accuracy'])  \n",
        "    #model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=[tf.metrics.Recall(), 'accuracy'])      \n",
        "    return model  \n",
        "    return model\n",
        "\n",
        "model = build_model()\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VY7OoXKsEO5k",
        "outputId": "b3b10a09-3b9d-4394-a249-f7f1c19b34da"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_5\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_15 (Dense)            (None, 188)               35532     \n",
            "                                                                 \n",
            " dropout_5 (Dropout)         (None, 188)               0         \n",
            "                                                                 \n",
            " dense_16 (Dense)            (None, 64)                12096     \n",
            "                                                                 \n",
            " dense_17 (Dense)            (None, 1)                 65        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 47,693\n",
            "Trainable params: 47,693\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.wrappers.scikit_learn import KerasRegressor\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score\n",
        "model = KerasRegressor(build_fn=build_model, epochs=50, batch_size=8, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-gZR7Cp4EyQE",
        "outputId": "924b7ea0-3051-4c1d-cb5b-04531886b51b"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: DeprecationWarning: KerasRegressor is deprecated, use Sci-Keras (https://github.com/adriangb/scikeras) instead. See https://www.adriangb.com/scikeras/stable/migration.html for help migrating.\n",
            "  after removing the cwd from sys.path.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train,y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VJv9DpnpER-Q",
        "outputId": "81368089-c37d-451d-85ad-d642dfa3a3d2"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "38/38 [==============================] - 1s 2ms/step - loss: 142154458464256.0000 - mse: 142154458464256.0000 - mae: 8115811.0000 - root_mean_squared_error: 11922854.0000\n",
            "Epoch 2/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 141896223555584.0000 - mse: 141896223555584.0000 - mae: 8099005.5000 - root_mean_squared_error: 11912020.0000\n",
            "Epoch 3/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 141337491931136.0000 - mse: 141337491931136.0000 - mae: 8065665.5000 - root_mean_squared_error: 11888545.0000\n",
            "Epoch 4/50\n",
            "38/38 [==============================] - 0s 3ms/step - loss: 140489579823104.0000 - mse: 140489579823104.0000 - mae: 8013996.5000 - root_mean_squared_error: 11852830.0000\n",
            "Epoch 5/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 139229099196416.0000 - mse: 139229099196416.0000 - mae: 7936966.0000 - root_mean_squared_error: 11799538.0000\n",
            "Epoch 6/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 137589059223552.0000 - mse: 137589059223552.0000 - mae: 7835480.5000 - root_mean_squared_error: 11729836.0000\n",
            "Epoch 7/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 135383610294272.0000 - mse: 135383610294272.0000 - mae: 7702748.0000 - root_mean_squared_error: 11635446.0000\n",
            "Epoch 8/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 132847935422464.0000 - mse: 132847935422464.0000 - mae: 7547277.5000 - root_mean_squared_error: 11525968.0000\n",
            "Epoch 9/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 129888543571968.0000 - mse: 129888543571968.0000 - mae: 7362558.5000 - root_mean_squared_error: 11396866.0000\n",
            "Epoch 10/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 126487088857088.0000 - mse: 126487088857088.0000 - mae: 7143913.0000 - root_mean_squared_error: 11246648.0000\n",
            "Epoch 11/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 122073833799680.0000 - mse: 122073833799680.0000 - mae: 6894817.5000 - root_mean_squared_error: 11048703.0000\n",
            "Epoch 12/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 117709232668672.0000 - mse: 117709232668672.0000 - mae: 6646768.0000 - root_mean_squared_error: 10849389.0000\n",
            "Epoch 13/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 112871757316096.0000 - mse: 112871757316096.0000 - mae: 6457883.0000 - root_mean_squared_error: 10624112.0000\n",
            "Epoch 14/50\n",
            "38/38 [==============================] - 0s 3ms/step - loss: 108109980762112.0000 - mse: 108109980762112.0000 - mae: 6284782.5000 - root_mean_squared_error: 10397595.0000\n",
            "Epoch 15/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 103544673796096.0000 - mse: 103544673796096.0000 - mae: 6178040.0000 - root_mean_squared_error: 10175690.0000\n",
            "Epoch 16/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 98253290864640.0000 - mse: 98253290864640.0000 - mae: 6083808.5000 - root_mean_squared_error: 9912280.0000\n",
            "Epoch 17/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 93600826261504.0000 - mse: 93600826261504.0000 - mae: 6020539.5000 - root_mean_squared_error: 9674752.0000\n",
            "Epoch 18/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 89040476962816.0000 - mse: 89040476962816.0000 - mae: 6019615.5000 - root_mean_squared_error: 9436126.0000\n",
            "Epoch 19/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 85537469759488.0000 - mse: 85537469759488.0000 - mae: 6007035.0000 - root_mean_squared_error: 9248647.0000\n",
            "Epoch 20/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 82016393494528.0000 - mse: 82016393494528.0000 - mae: 6050025.0000 - root_mean_squared_error: 9056290.0000\n",
            "Epoch 21/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 80280320737280.0000 - mse: 80280320737280.0000 - mae: 6145624.0000 - root_mean_squared_error: 8959929.0000\n",
            "Epoch 22/50\n",
            "38/38 [==============================] - 0s 3ms/step - loss: 78709721661440.0000 - mse: 78709721661440.0000 - mae: 6184912.0000 - root_mean_squared_error: 8871850.0000\n",
            "Epoch 23/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 77873025122304.0000 - mse: 77873025122304.0000 - mae: 6263706.5000 - root_mean_squared_error: 8824569.0000\n",
            "Epoch 24/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 77524008697856.0000 - mse: 77524008697856.0000 - mae: 6358552.5000 - root_mean_squared_error: 8804772.0000\n",
            "Epoch 25/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 77076140916736.0000 - mse: 77076140916736.0000 - mae: 6390723.0000 - root_mean_squared_error: 8779302.0000\n",
            "Epoch 26/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76870854901760.0000 - mse: 76870854901760.0000 - mae: 6431255.5000 - root_mean_squared_error: 8767603.0000\n",
            "Epoch 27/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76347716141056.0000 - mse: 76347716141056.0000 - mae: 6456179.0000 - root_mean_squared_error: 8737718.0000\n",
            "Epoch 28/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 77442823749632.0000 - mse: 77442823749632.0000 - mae: 6538979.5000 - root_mean_squared_error: 8800160.0000\n",
            "Epoch 29/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76960269074432.0000 - mse: 76960269074432.0000 - mae: 6532795.0000 - root_mean_squared_error: 8772700.0000\n",
            "Epoch 30/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76487235469312.0000 - mse: 76487235469312.0000 - mae: 6580964.0000 - root_mean_squared_error: 8745698.0000\n",
            "Epoch 31/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 75737436520448.0000 - mse: 75737436520448.0000 - mae: 6518103.0000 - root_mean_squared_error: 8702726.0000\n",
            "Epoch 32/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76706882781184.0000 - mse: 76706882781184.0000 - mae: 6602424.5000 - root_mean_squared_error: 8758247.0000\n",
            "Epoch 33/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76202215735296.0000 - mse: 76202215735296.0000 - mae: 6580694.5000 - root_mean_squared_error: 8729388.0000\n",
            "Epoch 34/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76601010159616.0000 - mse: 76601010159616.0000 - mae: 6543011.0000 - root_mean_squared_error: 8752200.0000\n",
            "Epoch 35/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76844506284032.0000 - mse: 76844506284032.0000 - mae: 6608878.0000 - root_mean_squared_error: 8766100.0000\n",
            "Epoch 36/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 77776002482176.0000 - mse: 77776002482176.0000 - mae: 6631972.0000 - root_mean_squared_error: 8819070.0000\n",
            "Epoch 37/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76948256587776.0000 - mse: 76948256587776.0000 - mae: 6571653.5000 - root_mean_squared_error: 8772016.0000\n",
            "Epoch 38/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76937108127744.0000 - mse: 76937108127744.0000 - mae: 6617799.0000 - root_mean_squared_error: 8771380.0000\n",
            "Epoch 39/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76157890330624.0000 - mse: 76157890330624.0000 - mae: 6561453.0000 - root_mean_squared_error: 8726849.0000\n",
            "Epoch 40/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 77399337205760.0000 - mse: 77399337205760.0000 - mae: 6611768.5000 - root_mean_squared_error: 8797689.0000\n",
            "Epoch 41/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 75669086142464.0000 - mse: 75669086142464.0000 - mae: 6572984.0000 - root_mean_squared_error: 8698798.0000\n",
            "Epoch 42/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 77141337178112.0000 - mse: 77141337178112.0000 - mae: 6592528.0000 - root_mean_squared_error: 8783014.0000\n",
            "Epoch 43/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76869110071296.0000 - mse: 76869110071296.0000 - mae: 6575218.5000 - root_mean_squared_error: 8767503.0000\n",
            "Epoch 44/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76805172101120.0000 - mse: 76805172101120.0000 - mae: 6580546.0000 - root_mean_squared_error: 8763856.0000\n",
            "Epoch 45/50\n",
            "38/38 [==============================] - 0s 3ms/step - loss: 75306975100928.0000 - mse: 75306975100928.0000 - mae: 6480782.0000 - root_mean_squared_error: 8677959.0000\n",
            "Epoch 46/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76699265925120.0000 - mse: 76699265925120.0000 - mae: 6534157.0000 - root_mean_squared_error: 8757812.0000\n",
            "Epoch 47/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76478804918272.0000 - mse: 76478804918272.0000 - mae: 6612447.0000 - root_mean_squared_error: 8745216.0000\n",
            "Epoch 48/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76445778968576.0000 - mse: 76445778968576.0000 - mae: 6626423.5000 - root_mean_squared_error: 8743328.0000\n",
            "Epoch 49/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 77171326451712.0000 - mse: 77171326451712.0000 - mae: 6583942.5000 - root_mean_squared_error: 8784721.0000\n",
            "Epoch 50/50\n",
            "38/38 [==============================] - 0s 2ms/step - loss: 76840546861056.0000 - mse: 76840546861056.0000 - mae: 6539982.5000 - root_mean_squared_error: 8765874.0000\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f4b1428c710>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scores = model.score(X_test, y_test)\n",
        "print(f\"Mean Squared Error of test set is :{scores}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YwNmIMhjYrDB",
        "outputId": "d61cac7b-47e1-44b7-95b6-f05a59ab37be"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "17/17 [==============================] - 0s 3ms/step - loss: 105238971285504.0000 - mse: 105238971285504.0000 - mae: 7923127.0000 - root_mean_squared_error: 10258605.0000\n",
            "Mean Squared Error of test set is :-105238971285504.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = model.predict(X_test)\n",
        "predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QCNtbZnlXuC0",
        "outputId": "6c929187-0432-4f23-d822-0e83180e77b6"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "17/17 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([7945306. , 7934952. , 8013242.5, 7970036. , 7918771. , 7913954.5,\n",
              "       7986285. , 7907112. , 7978034. , 8036907. , 8020709. , 7919405. ,\n",
              "       7988224.5, 7922842. , 7927978. , 7948720. , 7959987. , 7951156. ,\n",
              "       8027458.5, 8028087. , 7977538. , 7966060. , 7899370. , 8023303. ,\n",
              "       8026347.5, 7987666. , 7958573. , 7926383. , 7934679. , 7933043.5,\n",
              "       8043061. , 8029903. , 7938116. , 7966400. , 7946839.5, 8010743. ,\n",
              "       8014734. , 7957836. , 7944567. , 7980465.5, 7990872. , 7956760. ,\n",
              "       8019915. , 7962633.5, 8009082.5, 7981890. , 8024323. , 7918181.5,\n",
              "       7984807. , 8015527. , 7901121.5, 7940766.5, 8001252. , 7989412. ,\n",
              "       7949932.5, 7960598.5, 8056893. , 7944125. , 7984279. , 7996083.5,\n",
              "       7930210. , 8044386.5, 7986280. , 7973114. , 8031182. , 8034846. ,\n",
              "       7975836.5, 8017107. , 7990755. , 7946373. , 7911069. , 7966873.5,\n",
              "       8035840.5, 8073955. , 7948117. , 7966951. , 8012309. , 8010868. ,\n",
              "       7955416.5, 7978611. , 7974333.5, 7925365. , 7963452. , 7998453. ,\n",
              "       7943398. , 7906454. , 7960971. , 7961050. , 7937883.5, 7963774. ,\n",
              "       7938434. , 7892192. , 8013943. , 7907109. , 7983575. , 7959382. ,\n",
              "       7963146. , 8076832. , 7926205. , 8007673. , 7996241. , 7935697. ,\n",
              "       8042094. , 7903749. , 8037089. , 7990786. , 8056815.5, 8012187. ,\n",
              "       7938277. , 8044461. , 7993028. , 7950489. , 7951876. , 7982247. ,\n",
              "       7953450. , 8019148.5, 7924592. , 7900999.5, 7975502.5, 7986221. ,\n",
              "       7922857.5, 7998790.5, 7960109. , 8018797. , 7954323. , 7987280. ,\n",
              "       7935749.5, 7985480.5, 7994888. ], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(25,10))\n",
        "plt.scatter(y_test.tolist(), predictions)\n",
        "plt.plot(range(300_000), range(300_000))\n",
        "#plt.xlabel(\"Prices: $Y_i$\")\n",
        "#plt.ylabel(\"Predicted prices: $\\hat{Y}_i$\")\n",
        "#plt.title(\"Actual Rent vs Predicted Rent\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "mPsVF1NmYWRl",
        "outputId": "87809e8c-6ccc-474b-8ee1-502ad280042a"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f4b1410b3d0>]"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "plt.figure()\n",
        "ax1 = sns.distplot(y_test, hist=False, color=\"r\", label=\"Actual Value\")\n",
        "sns.distplot(predictions, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax1)\n",
        "\n",
        "plt.title('Actual vs Fitted Values')\n",
        "plt.xlabel('Salary')\n",
        "\n",
        "\n",
        "plt.show()\n",
        "plt.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "cz1MyQDcZ6oZ",
        "outputId": "35ebdfdb-4f49-4b5c-ebe7-bf08b3770315"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}